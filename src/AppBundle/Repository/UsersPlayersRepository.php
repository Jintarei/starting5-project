<?php

namespace AppBundle\Repository;
use AppBundle\Entity\NBAPlayers;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * UsersPlayersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersPlayersRepository extends \Doctrine\ORM\EntityRepository
{
    const GUARD_POSITION_CODE = 'G';
    const FORWARD_POSITION_CODE = 'F';
    const CENTER_POSITION_CODE = 'C';

    /**
     * @param $user
     * @return array|ArrayCollection
     */
    public function getGuards($user){
        $guards = new ArrayCollection();
        if($user){
            $userPlayers = $this->findBy(['userId' => $user]);
            foreach ($userPlayers as $userPlayer) {
                $player = $userPlayer->getPlayerId();
                $playerId = $player->getId();
                $playerProfile = $this->getProfile($playerId);
                $positions = explode('-', $playerProfile['pos']);
                if(isset($positions[0])){
                    $position = $positions[0];
                    if($position == self::GUARD_POSITION_CODE){
                        $guards[] = $playerProfile;
                    }
                }
            }

            return $guards;
        }
    }

    /**
     * @param $user
     * @return array|ArrayCollection
     */
    public function getForwards($user){
        $guards = new ArrayCollection();
        if($user){
            $userPlayers = $this->findBy(['userId' => $user]);
            foreach ($userPlayers as $userPlayer) {
                $player = $userPlayer->getPlayerId();
                $playerId = $player->getId();
                $playerProfile = $this->getProfile($playerId);
                $positions = explode('-', $playerProfile['pos']);
                if(isset($positions[0])){
                    $position = $positions[0];
                    if($position == self::FORWARD_POSITION_CODE){
                        $guards[] = $playerProfile;
                    }
                }
            }

            return $guards;
        }
    }

    /**
     * @param $user
     * @return array|ArrayCollection
     */
    public function getCenters($user){
        $guards = new ArrayCollection();
        if($user){
            $userPlayers = $this->findBy(['userId' => $user]);
            foreach ($userPlayers as $userPlayer) {
                $player = $userPlayer->getPlayerId();
                $playerId = $player->getId();
                $playerProfile = $this->getProfile($playerId);
                $positions = explode('-', $playerProfile['pos']);
                if(isset($positions[0])){
                    $position = $positions[0];
                    if($position == self::CENTER_POSITION_CODE){
                        $guards[] = $playerProfile;
                    }
                }
            }

            return $guards;
        }
    }

    /**
     * @param $playerId
     * @return array|null
     */
    public function getProfile($playerId)
    {
        $profile = null;
        foreach ($this->getPlayers() as $player) {
            if ($player->personId == $playerId) {
                $profile = $player;
            }
        }
        $playerStatsJson = file_get_contents('http://data.nba.net/data/10s/prod/v1/2017/players/' . $playerId . '_profile.json');
        $playersStats = json_decode($playerStatsJson);
        if ($profile->teamId == $playersStats->league->standard->teamId) {
            $stats = $playersStats->league->standard->stats->careerSummary;
            $playerProfile = array_merge((array)$profile, (array)$stats);

            return $playerProfile;
        }

        return null;
    }

    /**
     * @return mixed
     */
    public function getPlayers()
    {
        $playersJson = file_get_contents('http://data.nba.net/10s/prod/v1/2017/players.json');
        $playersDecode = json_decode($playersJson);
        $players = $playersDecode->league->standard;

        return $players;
    }
}
