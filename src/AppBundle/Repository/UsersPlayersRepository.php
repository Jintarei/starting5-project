<?php

namespace AppBundle\Repository;

use AppBundle\Entity\NBAPlayers;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping;

/**
 * UsersPlayersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersPlayersRepository extends \Doctrine\ORM\EntityRepository
{
    const GUARD_POSITION_CODE = 'G';
    const FORWARD_POSITION_CODE = 'F';
    const CENTER_POSITION_CODE = 'C';
    private $nbaPlayer;
    public $allGuards;
    public $allForwards;
    public $allCenters;

    public function __construct(EntityManager $em, Mapping\ClassMetadata $class)
    {
        parent::__construct($em, $class);
        $this->nbaPlayer = $this->getEntityManager()->getRepository('AppBundle:NBAPlayers');
    }

    /**
     * @param $user
     * @return array|ArrayCollection
     */
    public function getGuards($user, $page = 0)
    {
        $players = [];
        if ($user) {
            $guards = $this->findBy(['userId' => $user, 'position' => ['G', 'G-F','F-G']],  null, 9, 9 * $page);
            foreach ($guards as $guard) {
                $players[] = $guard->getPlayerId();
            }
            $this->allGuards = count($this->findBy(['userId' => $user,  'position' => ['G', 'G-F','F-G']]));
        }

        return $players;
    }

    /**
     * @param $user
     * @return array|ArrayCollection
     */
    public function getForwards($user, $page = 0)
    {
        $players = [];
        if ($user) {
            $guards = $this->findBy(['userId' => $user, 'position' => ['F', 'F-G','G-F', 'F-C', 'C-F']],  null, 9, 9 * $page);
            foreach ($guards as $guard) {
                $players[] = $guard->getPlayerId();
            }
            $this->allForwards = count($this->findBy(['userId' => $user,  'position' => ['F', 'F-G','G-F', 'F-C', 'C-F']]));
        }

        return $players;
    }

    /**
     * @param $user
     * @return array|ArrayCollection
     */
    public function getCenters($user, $page = 0)
    {
        $players = [];
        if ($user) {
            $guards = $this->findBy(['userId' => $user, 'position' => ['C', 'F-C','C-F']],  null, 9, 9 * $page);
            foreach ($guards as $guard) {
                $players[] = $guard->getPlayerId();
            }
            $this->allCenters = count($this->findBy(['userId' => $user,  'position' => ['C', 'F-C','C-F']]));
        }

        return $players;
    }
}
