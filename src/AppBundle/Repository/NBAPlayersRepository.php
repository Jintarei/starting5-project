<?php

namespace AppBundle\Repository;

use Doctrine\Common\Collections\ArrayCollection;

/**
 * NBAPlayersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NBAPlayersRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return mixed
     */
    public function getPlayers()
    {
        $allPlayers = $this->findAll();

        return $allPlayers;
    }

    /**
     * @return array|ArrayCollection
     */
    public function getGuards()
    {
        $players = $this->getPlayers();
        $guards = new ArrayCollection();
        $this->getPlayerPosition($players, 'G', $guards);

        return $guards;
    }

    /**
     * @return array|ArrayCollection
     */
    public function getForwards()
    {
        $players = $this->getPlayers();
        $forwards = new ArrayCollection();
        $this->getPlayerPosition($players, 'F', $forwards);

        return $forwards;
    }

    /**
     * @return array|ArrayCollection
     */
    public function getCenters()
    {
        $players = $this->getPlayers();
        $centers = new ArrayCollection();
        $this->getPlayerPosition($players, 'C', $centers);

        return $centers;
    }

    /**
     * @param $playerId
     * @return object|null
     */
    public function getProfile($playerId)
    {
        $profile = null;
        foreach ($this->getPlayers() as $player) {
            if ($player->getPlayerId() == $playerId) {
                $profile = $player;
            }
        }
        if ($profile !== null) {
            $playerStatsJson = file_get_contents('http://data.nba.net/data/10s/prod/v1/2017/players/' . $playerId . '_profile.json');
            $playersStats = json_decode($playerStatsJson);
            $stats = $playersStats->league->standard->stats->careerSummary;
            $playerProfile = (object)array_merge((array)$profile, (array)$stats);

            return $playerProfile;
        }
    }

    /**
     * @param $players
     * @param $positionCode
     * @param $positionArray
     */
    public function getPlayerPosition($players, $positionCode)
    {
        foreach ($players as $player) {
            $playerPosition = explode('-', $player->position);
            if (isset($playerPosition[0]) && $playerPosition[0] == $positionCode) {
                $pos[] = $player;
            } elseif (isset($playerPosition[0]) && isset($playerPosition[1]) && $playerPosition[1] == $positionCode) {
                $myPlayers[] = $player;
            }
        }
    }

    public function getLevelOnePlayer()
    {
        $query = $this->createQueryBuilder('p')
            ->where('p.rating > :rating')
            ->setParameter('rating', 95)
            ->getQuery();

        $players = $query->getResult();
        $player = $players[array_rand($players)];
        if($player->getPlayerId()){
            $nbaPlayer = $this->getProfile($player->getPlayerId());
            return $nbaPlayer;
        } else {
            $nbaPlayer = $this->getLevelOnePlayer();
        }

        return $nbaPlayer;
    }

    public function getLevelTwoPlayer()
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $query = $qb->select('u')
            ->from('AppBundle:NBAPlayers', 'u')
            ->andWhere($qb->expr()->between('u.rating', 88, 96))
            ->getQuery();

        $players = $query->getResult();
        $player = $players[array_rand($players)];
        if($player->getPlayerId()){
            $nbaPlayer = $this->getProfile($player->getPlayerId());
            return $nbaPlayer;
        } else {
            $nbaPlayer = $this->getLevelTwoPlayer();
        }

        return $nbaPlayer;
    }

    public function getLevelThreePlayer()
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $query = $qb->select('u')
            ->from('AppBundle:NBAPlayers', 'u')
            ->andWhere($qb->expr()->between('u.rating', 84, 89))
            ->getQuery();

        $players = $query->getResult();
        $player = $players[array_rand($players)];
        if($player->getPlayerId()){
            $nbaPlayer = $this->getProfile($player->getPlayerId());
            return $nbaPlayer;
        } else {
            $nbaPlayer = $this->getLevelThreePlayer();
        }

        return $nbaPlayer;
    }

    public function getLevelFourPlayer()
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $query = $qb->select('u')
            ->from('AppBundle:NBAPlayers', 'u')
            ->andWhere($qb->expr()->between('u.rating', 80, 83))
            ->getQuery();

        $players = $query->getResult();
        $player = $players[array_rand($players)];
        if($player->getPlayerId()){
            $nbaPlayer = $this->getProfile($player->getPlayerId());
            return $nbaPlayer;
        } else {
            $nbaPlayer = $this->getLevelFourPlayer();
        }

        return $nbaPlayer;
    }

    public function getLevelFivePlayer()
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $query = $qb->select('u')
            ->from('AppBundle:NBAPlayers', 'u')
            ->andWhere($qb->expr()->between('u.rating', 75, 80))
            ->getQuery();

        $players = $query->getResult();
        $player = $players[array_rand($players)];
        if($player->getPlayerId()){
            $nbaPlayer = $this->getProfile($player->getPlayerId());
            return $nbaPlayer;
        } else {
            $nbaPlayer = $this->getLevelFivePlayer();
        }

        return $nbaPlayer;
    }

    public function getLevelSixPlayer()
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $query = $qb->select('u')
            ->from('AppBundle:NBAPlayers', 'u')
            ->andWhere($qb->expr()->between('u.rating', 65, 75))
            ->getQuery();

        $players = $query->getResult();
        $player = $players[array_rand($players)];
        if($player->getPlayerId()){
            $nbaPlayer = $this->getProfile($player->getPlayerId());
            return $nbaPlayer;
        } else {
            $nbaPlayer = $this->getLevelSixPlayer();
        }

        return $nbaPlayer;
    }

    public function getLevelSevenPlayer()
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $query = $qb->select('u')
            ->from('AppBundle:NBAPlayers', 'u')
            ->andWhere($qb->expr()->between('u.rating', 0, 65))
            ->getQuery();

        $players = $query->getResult();
        $player = $players[array_rand($players)];
        $nbaPlayer = null;
        if($player->getPlayerId()){
            $nbaPlayer = $this->getProfile($player->getPlayerId());
            return $nbaPlayer;
        } else {
            $nbaPlayer = $this->getLevelSevenPlayer();
        }

        return $nbaPlayer;
    }

    public function packOpener($type)
    {
        $numberOfPlayers = 3;
        $popPlayer = $this->getRandomPlayers();
        if($type == 'giga'){
            $popPlayer = $this->getRandomGoldenPlayers(); //20% chance increased to get a very rare player
            $numberOfPlayers = 9;
        }
        if($type == 'golden'){
            $popPlayer = $this->getRandomGoldenPlayers(); //40% chance increased to get a very rare player
        }
        if($type == 'super-rare'){
            $popPlayer = $this->getRandomSuperRarePlayers(); //chance of getting super rare player are multiplied by 2.5 based of golden chances
        }
        $packContent = new ArrayCollection();

        for ($i = 0; $i < $numberOfPlayers; $i++) {
            $result = $popPlayer[array_rand($popPlayer)];
            switch ($result) {
                case 1:
                    ${"nbaPlayer" . $i} = $this->getLevelOnePlayer();
                    break;
                case 2:
                    ${"nbaPlayer" . $i} = $this->getLevelTwoPlayer();
                    break;
                case 3:
                    ${"nbaPlayer" . $i} = $this->getLevelThreePlayer();
                    break;
                case 4:
                    ${"nbaPlayer" . $i} = $this->getLevelFourPlayer();
                    break;
                case 5:
                    ${"nbaPlayer" . $i} = $this->getLevelFivePlayer();
                    break;
                case 6:
                    ${"nbaPlayer" . $i} = $this->getLevelSixPlayer();
                    break;
                case 7:
                    ${"nbaPlayer" . $i} = $this->getLevelSevenPlayer();
                    break;
            }
            $packContent[] = ${"nbaPlayer" . $i};
        }

        return $packContent;
    }

    public function getRandomPlayers()
    {
        $popPlayer = [];

        for ($i = 0; $i < 5; $i++) {
            $popPlayer[] = 2;
        }

        for ($i = 0; $i < 25; $i++) {
            $popPlayer[] = 3;
        }

        for ($i = 0; $i < 500; $i++) {
            $popPlayer[] = 4;
        }

        for ($i = 0; $i < 500; $i++) {
            $popPlayer[] = 5;
        }

        for ($i = 0; $i < 435; $i++) {
            $popPlayer[] = 6;
        }

        for ($i = 0; $i < 300; $i++) {
            $popPlayer[] = 7;
        }
        $popPlayer[] = 1;

        shuffle($popPlayer);

        return $popPlayer;
    }

    public function getRandomGoldenPlayers()
    {
        $popPlayer = [];

        for ($i = 0; $i < 10; $i++) {
            $popPlayer[] = 2;
        }

        for ($i = 0; $i < 40; $i++) {
            $popPlayer[] = 3;
        }

        for ($i = 0; $i < 500; $i++) {
            $popPlayer[] = 4;
        }

        for ($i = 0; $i < 500; $i++) {
            $popPlayer[] = 5;
        }

        for ($i = 0; $i < 435; $i++) {
            $popPlayer[] = 6;
        }

        for ($i = 0; $i < 300; $i++) {
            $popPlayer[] = 7;
        }
        $popPlayer[] = 1;

        shuffle($popPlayer);

        return $popPlayer;
    }

    public function getRandomSuperRarePlayers()
    {
        $popPlayer = [];

        for ($i = 0; $i < 10; $i++) {
            $popPlayer[] = 2;
        }

        for ($i = 0; $i < 500; $i++) {
            $popPlayer[] = 3;
        }

        for ($i = 0; $i < 200; $i++) {
            $popPlayer[] = 4;
        }

        for ($i = 0; $i < 100; $i++) {
            $popPlayer[] = 5;
        }

        for ($i = 0; $i < 100; $i++) {
            $popPlayer[] = 6;
        }

        for ($i = 0; $i < 100; $i++) {
            $popPlayer[] = 7;
        }
        $popPlayer[] = 1;

        shuffle($popPlayer);

        return $popPlayer;
    }
}
