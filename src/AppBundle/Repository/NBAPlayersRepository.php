<?php

namespace AppBundle\Repository;

use Doctrine\Common\Collections\ArrayCollection;

/**
 * NBAPlayersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NBAPlayersRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return mixed
     */
    public function getPlayers()
    {
        $playersJson = file_get_contents('http://data.nba.net/10s/prod/v1/2017/players.json');
        $playersDecode = json_decode($playersJson);
        $players = $playersDecode->league->standard;

        return $players;
    }

    /**
     * @return array|ArrayCollection
     */
    public function getGuards()
    {
        $players = $this->getPlayers();
        $guards = new ArrayCollection();
        $this->getPlayerPosition($players, 'G', $guards);

        return $guards;
    }

    /**
     * @return array|ArrayCollection
     */
    public function getForwards()
    {
        $players = $this->getPlayers();
        $forwards = new ArrayCollection();
        $this->getPlayerPosition($players, 'F', $forwards);

        return $forwards;
    }

    /**
     * @return array|ArrayCollection
     */
    public function getCenters()
    {
        $players = $this->getPlayers();
        $centers = new ArrayCollection();
        $this->getPlayerPosition($players, 'C', $centers);

        return $centers;
    }

    /**
     * @param $playerId
     * @return array|null
     */
    public function getProfile($playerId)
    {
        $profile = null;
        foreach ($this->getPlayers() as $player) {
            if ($player->personId == $playerId) {
                $profile = $player;
            }
        }
        $playerStatsJson = file_get_contents('http://data.nba.net/data/10s/prod/v1/2017/players/' . $playerId . '_profile.json');
        $playersStats = json_decode($playerStatsJson);
        if ($profile->teamId == $playersStats->league->standard->teamId) {
            $stats = $playersStats->league->standard->stats->careerSummary;
            $playerProfile = array_merge((array)$profile, (array)$stats);

            return $playerProfile;
        }

        return null;
    }

    public function getPlayerPosition($players, $positionCode, $positionArray)
    {
        foreach ($players as $player) {
            $position = explode('-',$player->pos);
            if($position[0] == $positionCode){
                $positionArray[] = $player;
            }
        }
    }
}
